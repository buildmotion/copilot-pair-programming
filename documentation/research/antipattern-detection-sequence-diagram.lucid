title Antipattern Detection System - Commit Process Flow

Developer->"Git Client": git add .
Developer->"Git Client": git commit -m "message"
"Git Client"->"Husky Hook": trigger pre-commit hook
note over "Husky Hook": Hook automatically triggered before commit creation

note over "Husky Hook", "Compliance Tester": Phase 1: AI Instruction Compliance
"Husky Hook"->"Pre-commit Script": execute .husky/pre-commit
"Pre-commit Script"->"File System": check for test-copilot-instructions.sh
"File System"->"Pre-commit Script": script exists
"Pre-commit Script"->"Compliance Tester": ./.github/scripts/test-copilot-instructions.sh

"Compliance Tester"->"File System": validate instruction files exist
"Compliance Tester"->"File System": check applyTo scope configuration
"Compliance Tester"->"File System": verify antipattern guidelines
"Compliance Tester"->"File System": confirm solar writing philosophy
"File System"->"Compliance Tester": instruction validation results

alt Instruction Validation Fails
    "Compliance Tester"->"Pre-commit Script": exit code 1
    "Pre-commit Script"->"Git Client": ❌ AI pattern instruction validation failed
    "Git Client"->Developer: COMMIT ABORTED
    note over Developer: Fix instruction issues and retry commit
else Instruction Validation Passes
    "Compliance Tester"->"Pre-commit Script": exit code 0
    "Pre-commit Script"->"Pre-commit Script": continue to pattern detection
end

note over "Pre-commit Script", "Pattern Detector": Phase 2: Real-time Antipattern Detection
"Pre-commit Script"->"Git Client": git diff --cached --name-only --diff-filter=ACM
"Git Client"->"Pre-commit Script": list of staged files
"Pre-commit Script"->"Pre-commit Script": filter for *.md files

loop For each staged markdown file
    "Pre-commit Script"->"Pattern Detector": scan file for antipatterns
    "Pattern Detector"->"File System": read file content
    "File System"->"Pattern Detector": file content
    
    "Pattern Detector"->"Pattern Detector": grep -n "isn't just|not just|more than just|not merely"
    "Pattern Detector"->"Pattern Detector": grep -v "grep" (exclude false positives)
    "Pattern Detector"->"Pattern Detector": head -5 (limit output)
    
    alt Antipatterns Found
        "Pattern Detector"->"Pre-commit Script": violations with line numbers
        "Pre-commit Script"->"Git Client": ❌ Found antipattern in staged file
        "Pre-commit Script"->"Git Client": show violation details
        "Git Client"->Developer: COMMIT ABORTED
        note over Developer: Developer sees:\n❌ Found antipattern in file.md\nLines with expectation-subversion patterns:\n60:- text with "not just" violation\nPlease remove these patterns
        Developer->Developer: edit file to remove antipatterns
        Developer->"Git Client": git add . (re-stage fixed file)
        Developer->"Git Client": git commit -m "message" (retry)
        note over Developer: Process starts over with fixed content
    else No Antipatterns Found
        "Pattern Detector"->"Pre-commit Script": file clean
        "Pre-commit Script"->"Pre-commit Script": continue to next file
    end
end

note over "Pre-commit Script", "Git Client": Successful Validation
"Pre-commit Script"->"Git Client": ✅ No antipatterns found in staged files
"Pre-commit Script"->"Git Client": ✅ Pre-commit validation passed
"Git Client"->"Husky Hook": pre-commit hook success
"Husky Hook"->"Git Client": proceed to commit-msg validation

note over "Git Client", "Husky Hook": Commit Message Validation
"Git Client"->"Husky Hook": trigger commit-msg hook
"Husky Hook"->"Git Client": validate conventional commit format
note over "Husky Hook": Separate hook validates commit message format

alt Commit Message Invalid
    "Husky Hook"->"Git Client": commit message validation failed
    "Git Client"->Developer: COMMIT ABORTED (invalid message format)
else Commit Message Valid
    "Husky Hook"->"Git Client": commit message validation passed
    "Git Client"->"Git Client": create commit object
    "Git Client"->Developer: ✅ Commit created successfully
end

note over Developer, "Remote Repository": Push to Remote
Developer->"Git Client": git push
"Git Client"->"Remote Repository": push commit
"Remote Repository"->"Git Client": push successful
"Git Client"->Developer: ✅ Changes pushed to remote repository
